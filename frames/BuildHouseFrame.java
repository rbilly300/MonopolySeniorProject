
package frames;

/*****************************************
* Class Name: BuildHouseFrame
* Purpose: An internal frame that allows a player
* to build a house on a monopoly
*******************************************/

import monopoly.engine.Game;
import java.util.ArrayList;

public class BuildHouseFrame extends javax.swing.JInternalFrame 
{
    //constructor takes the current game as a parameter
    public BuildHouseFrame(Game a_currentGame) 
    {
        m_currentGame = a_currentGame;
        m_lastPropClicked = -1;
        initComponents();
        initStartingView();
    }

    /******************************************************************************/
    //The following code was generated by the form editor then refactored to fit the design needs
    
    @SuppressWarnings("unchecked")
    
    private void initComponents() 
    {

        java.awt.Label dBlueProps = new java.awt.Label();
        java.awt.Label greenProps = new java.awt.Label();
        java.awt.Label lBlueProps = new java.awt.Label();
        java.awt.Label orangeProps = new java.awt.Label();
        java.awt.Label pinkProps = new java.awt.Label();
        java.awt.Label purpleProps = new java.awt.Label();
        java.awt.Label redProps = new java.awt.Label();
        java.awt.Label yellowProps = new java.awt.Label();
        m_black = new java.awt.Color(0, 0, 0);
        m_playerName = new javax.swing.JLabel();
        m_exitBtn = new javax.swing.JButton();
        m_removeHouseBtn = new javax.swing.JButton();
        m_addHouseBtn = new javax.swing.JButton();
        m_allProps = new java.awt.Label[8];

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pinkProps.setAlignment(java.awt.Label.CENTER);
        pinkProps.setBackground(new java.awt.Color(255, 0, 255));
        pinkProps.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pinkProps.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        pinkProps.setText("Pink Properties(" + m_currentGame.getBoard().getMajorProperty(11).getNumHouses() + ")");

        orangeProps.setAlignment(java.awt.Label.CENTER);
        orangeProps.setBackground(new java.awt.Color(255, 153, 51));
        orangeProps.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        orangeProps.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        orangeProps.setText("Orange Properties(" + m_currentGame.getBoard().getMajorProperty(16).getNumHouses() + ")");

        redProps.setAlignment(java.awt.Label.CENTER);
        redProps.setBackground(new java.awt.Color(255, 51, 51));
        redProps.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        redProps.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        redProps.setText("Red Properties(" + m_currentGame.getBoard().getMajorProperty(21).getNumHouses() + ")");

        yellowProps.setAlignment(java.awt.Label.CENTER);
        yellowProps.setBackground(new java.awt.Color(255, 255, 51));
        yellowProps.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        yellowProps.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        yellowProps.setText("Yellow Properties(" + m_currentGame.getBoard().getMajorProperty(26).getNumHouses() + ")");

        purpleProps.setAlignment(java.awt.Label.CENTER);
        purpleProps.setBackground(new java.awt.Color(153, 0, 153));
        purpleProps.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        purpleProps.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        purpleProps.setText("Purple Properties(" + m_currentGame.getBoard().getMajorProperty(1).getNumHouses() + ")");
        
        lBlueProps.setAlignment(java.awt.Label.CENTER);
        lBlueProps.setBackground(new java.awt.Color(0, 204, 255));
        lBlueProps.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lBlueProps.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        lBlueProps.setText("Light Blue Properties(" + m_currentGame.getBoard().getMajorProperty(6).getNumHouses() + ")");

        dBlueProps.setAlignment(java.awt.Label.CENTER);
        dBlueProps.setBackground(new java.awt.Color(0, 51, 255));
        dBlueProps.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dBlueProps.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        dBlueProps.setText("Dark Blue Properties(" + m_currentGame.getBoard().getMajorProperty(39).getNumHouses() + ")");

        greenProps.setAlignment(java.awt.Label.CENTER);
        greenProps.setBackground(new java.awt.Color(0, 204, 51));
        greenProps.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        greenProps.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        greenProps.setText("Green Properties(" + m_currentGame.getBoard().getMajorProperty(31).getNumHouses() + ")");

        m_allProps[0] = purpleProps;
        m_allProps[1] = lBlueProps;
        m_allProps[2] = pinkProps;
        m_allProps[3] = orangeProps;
        m_allProps[4] = redProps;
        m_allProps[5] = yellowProps;
        m_allProps[6] = greenProps;
        m_allProps[7] = dBlueProps;
        
        m_playerName.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        m_playerName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        m_playerName.setText(m_currentGame.getPlayerName(m_currentGame.getTurn()));

        m_exitBtn.setText("Exit");
        m_exitBtn.addMouseListener(new java.awt.event.MouseAdapter() 
        {   
            public void mousePressed(java.awt.event.MouseEvent evt) 
            {
                exit(evt);
            }
        });

        m_removeHouseBtn.setText("Remove House");
        m_removeHouseBtn.addMouseListener(new java.awt.event.MouseAdapter() 
        {   
            public void mousePressed(java.awt.event.MouseEvent evt) 
            {
                removeHouse(evt);
            }
        });

        m_addHouseBtn.setText("Add House");
        m_addHouseBtn.addMouseListener(new java.awt.event.MouseAdapter() 
        {   
            public void mousePressed(java.awt.event.MouseEvent evt) 
            {
                addHouse(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(m_playerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(m_allProps[1], javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(m_allProps[2], javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(m_allProps[0], javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(m_allProps[3], javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(m_allProps[4], javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(m_allProps[5], javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(m_allProps[6], javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(m_allProps[7], javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(m_removeHouseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(m_exitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(m_addHouseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(m_playerName, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(m_allProps[0], javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_allProps[1], javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_allProps[2], javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_allProps[3], javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_allProps[4], javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_allProps[5], javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_allProps[6], javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_allProps[7], javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(m_addHouseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_removeHouseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(m_exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );

        pack();
    }               
/*
NAME
        initStartingView

SYNOPSIS
        initStartingView()
    
            No parameters.

DESCRIPTION
        This method initializes the frame.

RETURNS
        void

AUTHOR
        William Ryan
*/
    private void initStartingView()
    {
        //holds all the players monopolies
        boolean[] playerMonopolies = m_currentGame.getPlayer(m_currentGame.getTurn()).getMonopoly();
        
       
        for(int i = 0; i < playerMonopolies.length;i++)
        {
            //if the player does not have a monopoly on the property
            if(!playerMonopolies[i])
            {
                m_allProps[i].setBackground(m_black);
                
            }
            //if the player has a monopoly on the propertry
            else
            {
                //set an on click listener to the monopoly label
                m_allProps[i].addMouseListener(new java.awt.event.MouseAdapter() 
                {   
                    public void mousePressed(java.awt.event.MouseEvent evt) 
                    {
                        propertyClicked(evt);
                    }
                });
            }
        }
    }
/*
NAME
        addHouse

SYNOPSIS
        addHouse(java.awt.event.MouseEvent evt)
    
            evt --> The source of the event.

DESCRIPTION
        This method is executed when a player clicks the add house button. It will
        then add a house to the monopoly last clicked on if possible.

RETURNS
        void

AUTHOR
        William Ryan
*/
    private void addHouse(java.awt.event.MouseEvent evt)
    {
        //if the player has not clicked a property yet, do not continue
        if(m_lastPropClicked != -1)
        {
            //get the players owned properties
            ArrayList <boolean[]> playerProperties = m_currentGame.getPlayer(m_currentGame.getTurn()).getOwnedProperties();
            int[] spaceNumbers = new int[playerProperties.get(m_lastPropClicked).length];

            //get the space numbers of the properties to build houses on
            for(int i = 0; i < playerProperties.get(m_lastPropClicked).length; i++)
            {
                spaceNumbers[i] = m_currentGame.getBoard().getPropertyNumById(m_lastPropClicked, i);
            }

            //get the build price for the property
            int buildPrice = m_currentGame.getBoard().getMajorProperty(spaceNumbers[0]).getBuildPrice();

            //if the player cannot afford to build a house, do not continue
            if(m_currentGame.getPlayer(m_currentGame.getTurn()).getMoney() > buildPrice)
            {
                //if the property already has the max number of houses on it
                if(m_currentGame.getBoard().getMajorProperty(spaceNumbers[0]).getNumHouses() != 5)
                {
                    //set the number of houses on each property and set the rent accordingly
                    for(int i = 0; i < spaceNumbers.length; i++)
                    {
                        m_currentGame.getBoard().getMajorProperty(spaceNumbers[i]).incNumHouses(true);
                        m_currentGame.getBoard().getMajorProperty(spaceNumbers[i]).setCurrentPrice
                            (m_currentGame.getBoard().getMajorProperty(spaceNumbers[i]).getHouseRent());

                    }
                    //update the label
                    m_allProps[m_lastPropClicked].setText(m_familyName + "(" + m_currentGame.getBoard().getMajorProperty(spaceNumbers[0]).getNumHouses() + ")");
                    m_allProps[m_lastPropClicked].setEnabled(true);
                    m_currentGame.getPlayer(m_currentGame.getTurn()).addToPlayerMoney(-1 * buildPrice);

                    //update the board in MainGameFrame
                    updateBoardHouses();
                }
            }
        }
    }
/*
NAME
        removeHouse

SYNOPSIS
        removeHouse(java.awt.event.MouseEvent evt)
    
            evt --> The source of the event.

DESCRIPTION
        This method is executed when a player clicks the remove house button. It will
        then remove a house to the monopoly last clicked on if possible.

RETURNS
        void

AUTHOR
        William Ryan
*/
    private void removeHouse(java.awt.event.MouseEvent evt)
    {
        //if the player has not clicked a property yet, do not continue
        if(m_lastPropClicked != -1)
        {
            //get the players owned properties
            ArrayList <boolean[]> playerProperties = m_currentGame.getPlayer(m_currentGame.getTurn()).getOwnedProperties();
            int[] spaceNumbers = new int[playerProperties.get(m_lastPropClicked).length];

            //get the space numbers of the properties to build houses on
            for(int i = 0; i < playerProperties.get(m_lastPropClicked).length; i++)
            {
                spaceNumbers[i] = m_currentGame.getBoard().getPropertyNumById(m_lastPropClicked, i);
            }

            //get the build price for the property minus 10%
            int buildPrice = m_currentGame.getBoard().getMajorProperty(spaceNumbers[0]).getBuildPrice() - 
                               (int)(m_currentGame.getBoard().getMajorProperty(spaceNumbers[0]).getBuildPrice() * .10);

            //if the player cannot afford to build a house, do not continue
            if(m_currentGame.getBoard().getMajorProperty(spaceNumbers[0]).getNumHouses() != 0)
            {
                //set the number of houses on each property and set the rent accordingly
                for(int i = 0; i < spaceNumbers.length; i++)
                {
                    m_currentGame.getBoard().getMajorProperty(spaceNumbers[i]).incNumHouses(false);
                    m_currentGame.getBoard().getMajorProperty(spaceNumbers[i]).setCurrentPrice
                        (m_currentGame.getBoard().getMajorProperty(spaceNumbers[i]).getHouseRent());

                }
                //update the label
                m_allProps[m_lastPropClicked].setText(m_familyName + "(" + m_currentGame.getBoard().getMajorProperty(spaceNumbers[0]).getNumHouses() + ")");
                m_allProps[m_lastPropClicked].setEnabled(true);
                m_currentGame.getPlayer(m_currentGame.getTurn()).addToPlayerMoney(buildPrice);

                //update the board in MainGameFrame
                updateBoardHouses();
            }
        }
    }
    //executed when the user presses the exit button
    private void exit(java.awt.event.MouseEvent evt)
    {
        this.dispose();
    }
/*
NAME
        propertyClicked

SYNOPSIS
        propertyClicked(java.awt.event.MouseEvent evt)
    
            evt --> The source of the event.

DESCRIPTION
        This method is executed when a player clicks a property label.

RETURNS
        void

AUTHOR
        William Ryan
*/
    private void propertyClicked(java.awt.event.MouseEvent evt)
    {
        //store the last label clicked
        java.awt.Label propertyClicked = (java.awt.Label)evt.getSource();
        propertyClicked.setEnabled(true);
        m_allProps[m_lastPropClicked].setEnabled(false);
        
        String propFamily = propertyClicked.getText();
        m_familyName = "";


        //parse the text on the label
        for(int i = 0; i < propFamily.length(); i++)
        {
            char nextChar = propFamily.charAt(i);

            if(nextChar == '(')
            {
                break;
            }
            else
            {
                m_familyName = m_familyName + nextChar;
            }
        }

        //get the number of the property based on the parsed name
        switch(m_familyName)
        {
            case "Purple Properties":
                m_lastPropClicked = 0;
                break;
            case "Light Blue Properties":
                m_lastPropClicked = 1;
                break;
            case "Pink Properties":
                m_lastPropClicked = 2;
                break;
            case "Orange Properties":
                m_lastPropClicked = 3;    
                break;
            case "Red Properties":
                m_lastPropClicked = 4;
                break;
            case "Yellow Properties":
                m_lastPropClicked = 5;
                break;
            case "Green Properties":
                m_lastPropClicked = 6;
                break;
            case "Dark Blue Properties":
                m_lastPropClicked = 7;
                break;
        }
    }
/*
NAME
        updateBoardHouses()

SYNOPSIS
        private void updateBoardHouses()
    
            No parameters.

DESCRIPTION
        This method updates the houses on the board in the MainGameFrame.

RETURNS
        void

AUTHOR
        William Ryan
*/
    private void updateBoardHouses()
    {
        //update the board based on the last property cliced
        switch(m_lastPropClicked)
        {
            //purple
            case 0:
                MainGameFrame.mainGameFrame.setHouse(0, m_currentGame.getBoard().getMajorProperty(1).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(1, m_currentGame.getBoard().getMajorProperty(3).getNumHouses());
                break;
            //light blue
            case 1:
                MainGameFrame.mainGameFrame.setHouse(2, m_currentGame.getBoard().getMajorProperty(6).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(3, m_currentGame.getBoard().getMajorProperty(8).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(4, m_currentGame.getBoard().getMajorProperty(9).getNumHouses());
                break;
            //pink
            case 2:
                MainGameFrame.mainGameFrame.setHouse(5, m_currentGame.getBoard().getMajorProperty(11).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(6, m_currentGame.getBoard().getMajorProperty(13).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(7, m_currentGame.getBoard().getMajorProperty(14).getNumHouses());
                break;
            //orange
            case 3:
                MainGameFrame.mainGameFrame.setHouse(8, m_currentGame.getBoard().getMajorProperty(16).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(9, m_currentGame.getBoard().getMajorProperty(18).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(10, m_currentGame.getBoard().getMajorProperty(19).getNumHouses());
                break;
            //red
            case 4:
                MainGameFrame.mainGameFrame.setHouse(11, m_currentGame.getBoard().getMajorProperty(21).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(12, m_currentGame.getBoard().getMajorProperty(22).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(13, m_currentGame.getBoard().getMajorProperty(24).getNumHouses());
                break;
            //yellow
            case 5:
                MainGameFrame.mainGameFrame.setHouse(14, m_currentGame.getBoard().getMajorProperty(26).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(15, m_currentGame.getBoard().getMajorProperty(27).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(16, m_currentGame.getBoard().getMajorProperty(29).getNumHouses());
                break;
            //green
            case 6:
                MainGameFrame.mainGameFrame.setHouse(17, m_currentGame.getBoard().getMajorProperty(31).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(18, m_currentGame.getBoard().getMajorProperty(32).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(19, m_currentGame.getBoard().getMajorProperty(34).getNumHouses());
                break;
            //dark blue
            case 7:
                MainGameFrame.mainGameFrame.setHouse(20, m_currentGame.getBoard().getMajorProperty(37).getNumHouses());
                MainGameFrame.mainGameFrame.setHouse(21, m_currentGame.getBoard().getMajorProperty(39).getNumHouses());
                break;
        }
    }
    
    //Button used to add a house to a monopoly
    private javax.swing.JButton m_addHouseBtn;
    //Button used to exit the build house frame
    private javax.swing.JButton m_exitBtn;
    //Holds the players name to display
    private javax.swing.JLabel m_playerName;
    //Removes a house from a monoploy
    private javax.swing.JButton m_removeHouseBtn;
    //Holds all the displayed property labels
    private java.awt.Label[] m_allProps;
    //Holds the color black for setting the background on labels
    private java.awt.Color m_black;
    //Holds the name of the property family
    private String m_familyName;
    //Holds the current game in play
    private Game m_currentGame;
    //Holds the last property clicked by the user 
    private int m_lastPropClicked;
}
