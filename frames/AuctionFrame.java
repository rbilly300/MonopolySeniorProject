
package frames;

/*****************************************
* Class Name: AuctionFrame
* Purpose: An internal frame that displays an auction 
* that is taking place
*******************************************/

import monopoly.engine.Game;
import monopoly.engine.MinorProperty;
import monopoly.engine.MajorProperty;
import java.util.ArrayList;

public class AuctionFrame extends javax.swing.JInternalFrame 
{
    //@param a_endTurnBtn --> The end turn button from MainGameFrame
    //@param a_currentGame --> The current game in play
    //@param a_currentSpaceNum --> The space number of the property being bidded on
    //@param a_moneyInd --> The players money indicator from MainGameFrame
    public AuctionFrame(javax.swing.JButton a_endTurnBtn, Game a_currentGame, int a_currentSpaceNum, javax.swing.JLabel[] a_moneyInd) 
    {
        initComponents();
        m_endTurn = a_endTurnBtn;
        m_turn = 1;
        m_currentBid = 50;
        m_passedPlayers = 0;
        m_moneyInd = a_moneyInd;
        m_currentGame = a_currentGame; 
        m_currentSpaceNum = a_currentSpaceNum;
        initFrame();
    }

    /***************************************************************************/
    //The following method was generated by the for editor
    /***************************************************************************/
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        propertyName = new javax.swing.JLabel();
        propertyInfo = new javax.swing.JLabel();
        bidInd = new javax.swing.JLabel();
        playerOnePanel = new javax.swing.JPanel();
        playerOneName = new javax.swing.JLabel();
        playerOneInd = new javax.swing.JLabel();
        playerOneMoney = new javax.swing.JLabel();
        playerTwoPanel = new javax.swing.JPanel();
        playerTwoName = new javax.swing.JLabel();
        playerTwoInd = new javax.swing.JLabel();
        playerTwoMoney = new javax.swing.JLabel();
        playerThreePanel = new javax.swing.JPanel();
        playerThreeName = new javax.swing.JLabel();
        playerThreeInd = new javax.swing.JLabel();
        playerThreeMoney = new javax.swing.JLabel();
        playerFourPanel = new javax.swing.JPanel();
        playerFourName = new javax.swing.JLabel();
        playerFourInd = new javax.swing.JLabel();
        playerFourMoney = new javax.swing.JLabel();
        bidFifty = new javax.swing.JButton();
        bidOneHund = new javax.swing.JButton();
        bidOneFifty = new javax.swing.JButton();
        passBtn = new javax.swing.JButton();
        continueBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        propertyName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        propertyName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        propertyInfo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        propertyInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        propertyInfo.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        bidInd.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        bidInd.setText("Current Bid: $50");

        playerOnePanel.setBackground(new java.awt.Color(0, 204, 255));
        playerOnePanel.setBorder(new javax.swing.border.MatteBorder(null));
        playerOnePanel.setPreferredSize(new java.awt.Dimension(0, 106));

        playerOneName.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N

        playerOneInd.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        playerOneInd.setText("Your Bid!");

        playerOneMoney.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N

        javax.swing.GroupLayout playerOnePanelLayout = new javax.swing.GroupLayout(playerOnePanel);
        playerOnePanel.setLayout(playerOnePanelLayout);
        playerOnePanelLayout.setHorizontalGroup(
            playerOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerOnePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playerOnePanelLayout.createSequentialGroup()
                        .addComponent(playerOneName, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(18, Short.MAX_VALUE))
                    .addGroup(playerOnePanelLayout.createSequentialGroup()
                        .addComponent(playerOneInd, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerOneMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        playerOnePanelLayout.setVerticalGroup(
            playerOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerOnePanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(playerOneName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(playerOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerOneInd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playerOneMoney, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addContainerGap())
        );

        playerTwoPanel.setBackground(new java.awt.Color(255, 51, 51));
        playerTwoPanel.setBorder(new javax.swing.border.MatteBorder(null));

        playerTwoName.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N

        playerTwoInd.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        playerTwoInd.setText("Your Bid!");

        playerTwoMoney.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N

        javax.swing.GroupLayout playerTwoPanelLayout = new javax.swing.GroupLayout(playerTwoPanel);
        playerTwoPanel.setLayout(playerTwoPanelLayout);
        playerTwoPanelLayout.setHorizontalGroup(
            playerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerTwoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playerTwoPanelLayout.createSequentialGroup()
                        .addComponent(playerTwoName, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(playerTwoPanelLayout.createSequentialGroup()
                        .addComponent(playerTwoInd, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerTwoMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        playerTwoPanelLayout.setVerticalGroup(
            playerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerTwoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playerTwoName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(playerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerTwoInd, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(playerTwoMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        playerThreePanel.setBackground(new java.awt.Color(102, 255, 102));
        playerThreePanel.setBorder(new javax.swing.border.MatteBorder(null));
        playerThreePanel.setPreferredSize(new java.awt.Dimension(0, 106));

        playerThreeName.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N

        playerThreeInd.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        playerThreeInd.setText("Your Bid!");

        playerThreeMoney.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N

        javax.swing.GroupLayout playerThreePanelLayout = new javax.swing.GroupLayout(playerThreePanel);
        playerThreePanel.setLayout(playerThreePanelLayout);
        playerThreePanelLayout.setHorizontalGroup(
            playerThreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerThreePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerThreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playerThreePanelLayout.createSequentialGroup()
                        .addComponent(playerThreeName, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(playerThreePanelLayout.createSequentialGroup()
                        .addComponent(playerThreeInd, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(playerThreeMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        playerThreePanelLayout.setVerticalGroup(
            playerThreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerThreePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playerThreeName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(playerThreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerThreeInd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playerThreeMoney, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addContainerGap())
        );

        playerFourPanel.setBackground(new java.awt.Color(255, 255, 51));
        playerFourPanel.setBorder(new javax.swing.border.MatteBorder(null));
        playerFourPanel.setPreferredSize(new java.awt.Dimension(0, 106));

        playerFourName.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N

        playerFourInd.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        playerFourInd.setText("Your Bid!");

        playerFourMoney.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N

        javax.swing.GroupLayout playerFourPanelLayout = new javax.swing.GroupLayout(playerFourPanel);
        playerFourPanel.setLayout(playerFourPanelLayout);
        playerFourPanelLayout.setHorizontalGroup(
            playerFourPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFourPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerFourPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playerFourPanelLayout.createSequentialGroup()
                        .addComponent(playerFourName, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(21, Short.MAX_VALUE))
                    .addGroup(playerFourPanelLayout.createSequentialGroup()
                        .addComponent(playerFourInd, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(playerFourMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        playerFourPanelLayout.setVerticalGroup(
            playerFourPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFourPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playerFourName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerFourPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerFourInd, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(playerFourMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );

        bidFifty.setText("Bid $50");
        bidFifty.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                bidFiftyMousePressed(evt);
            }
        });

        bidOneHund.setText("Bid $100");
        bidOneHund.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                bidOneHundMousePressed(evt);
            }
        });

        bidOneFifty.setText("Bid $150");
        bidOneFifty.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                bidOneFiftyMousePressed(evt);
            }
        });

        passBtn.setText("Pass");
        passBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                passBtnMousePressed(evt);
            }
        });

        continueBtn.setText("Continue");
        continueBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                continueBtnMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(propertyName, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                        .addComponent(propertyInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bidFifty, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bidInd, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bidOneHund, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bidOneFifty, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(passBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(continueBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(126, 126, 126)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerOnePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(playerFourPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                            .addComponent(playerTwoPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playerThreePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerOnePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerTwoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerThreePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerFourPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(propertyName, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(propertyInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bidInd, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bidFifty, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bidOneHund, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(continueBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(passBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(bidOneFifty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(25, 25, 25))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //if the player bid $50
    private void bidFiftyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bidFiftyMousePressed
        // TODO add your handling code here:
        bid(50);
    }//GEN-LAST:event_bidFiftyMousePressed
    
    //if the player bid $100
    private void bidOneHundMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bidOneHundMousePressed
        // TODO add your handling code here:
        bid(100);
    }//GEN-LAST:event_bidOneHundMousePressed

    //if the player bid $150
    private void bidOneFiftyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bidOneFiftyMousePressed
        // TODO add your handling code here:
        bid(150);
    }//GEN-LAST:event_bidOneFiftyMousePressed

    private void continueBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_continueBtnMousePressed
        // TODO add your handling code here:
        m_moneyInd[m_turn - 1].setText("Money: $" + m_currentGame.getPlayer(m_turn).getMoney());
        m_endTurn.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_continueBtnMousePressed

/*
NAME
        passBtnMousePressed

SYNOPSIS
        private void passBtnMousePressed(java.awt.event.MouseEvent evt)
    
            evt --> The source of the event.

DESCRIPTION
        This method is executed when a player presses the pass button
        removes a player from the current auction.

RETURNS
        void

AUTHOR
        William Ryan
*/
    private void passBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passBtnMousePressed
        
        //set the player who passed out of the auction
        m_participatingPlayers.set(m_turn - 1, -1);
        m_passedPlayers++;
        
        //set the indicator according to who passed
        switch(m_turn)
        {
            case 1:
                playerOneName.setText(m_currentGame.getPlayerName(1) + " is out");
                break;
            case 2:
                playerTwoName.setText(m_currentGame.getPlayerName(2) + " is out");
                break;
            case 3:
                playerThreeName.setText(m_currentGame.getPlayerName(3) + " is out");
                break;
            case 4:
                playerFourName.setText(m_currentGame.getPlayerName(4) + " is out");
                break;
        }
        
        //if all but one player has passed, end the auction
        if(nextTurn())
        {
            bidInd.setText("Price Paid: $" + m_currentBid);
            return;
        }
        //otherwise update the frame
        else
        {
            updateFrame();
        }
    }//GEN-LAST:event_passBtnMousePressed
/*
NAME
        initFrame

SYNOPSIS
        initFrame()
    
            No parameters.

DESCRIPTION
        This method initializes the frame.

RETURNS
        void

AUTHOR
        William Ryan
*/
    private void initFrame()
    {
        String actionText = "";
        String name = m_currentGame.getSpaceName(m_currentSpaceNum);
        propertyName.setText("The Bidding Will Start at $50");
        
        //display the property info based on the property up for auction
        switch(m_currentGame.getSpace(m_currentSpaceNum).getSpaceType())
        {
            //if the space is a normal colored property
            case NORMAL:
                MajorProperty tempMaj = (MajorProperty) m_currentGame.getSpace(m_currentSpaceNum);
                
                actionText = actionText + "<html>Property Name: " + name +"<br/><br/>" +
                                 "Price: " + tempMaj.getInitialPrice() + 
                                 "<br/>Rent: " + tempMaj.getRent() + 
                                 tempMaj.getFormatedHouseInfo() + "<br/><html/>";
                break;
                
            //if the space is a railroad
            case RAILROAD:
                MinorProperty tempMinRR = (MinorProperty) m_currentGame.getSpace(m_currentSpaceNum);
                actionText = actionText + "<html>RailRoad Name: " + name +"<br/><br/>" +
                                          "Price: " + tempMinRR.getInitialPrice() + "<br/>" +
                                          "Rent For 1 Owned: $25 <br/>Rent For 2 Owned: $50 <br/>Rent For 3 Owned: $100 <br/>Rent For 4 Owned: $200";
                break;
                
            //if the space is a utility
            case UTILITY:
                MinorProperty tempMinU = (MinorProperty) m_currentGame.getSpace(m_currentSpaceNum);
                
                actionText = actionText + "<html>Utility Name: " + name +"<br/><br/>" +
                                          "Price: " + tempMinU.getInitialPrice() + "<br/>" + 
                                          "Rent For 1 Utility: Player rolls dice and pays 4 times the amount shown<br/>"
                                           + "Rent For 1 Utility: Player rolls dice and pays 10 times the amount shown";
                break;
        }
        
        propertyInfo.setText(actionText);
        initPlayers();
    }
/*
NAME
        initPlayers

SYNOPSIS
        initPlayers()
    
            No parameters.

DESCRIPTION
        This method initializes the players panels to their begining state.

RETURNS
        void

AUTHOR
        William Ryan
*/
    private void initPlayers()
    {
        playerOneInd.setVisible(true);
        playerTwoInd.setVisible(false);
        playerThreeInd.setVisible(false);
        playerFourInd.setVisible(false);
        continueBtn.setVisible(false);
        m_playersMoney = new int[m_currentGame.getNumPlayers()];
        m_participatingPlayers = new <Integer>ArrayList();
        int brokePlayers = 0;
        
        //count all the players who cannot bid
        for(int i = 0; i < m_playersMoney.length;i++)
        {
            m_playersMoney[i] = m_currentGame.getPlayer(i + 1).getMoney();
            
            //if the player has less than $50
            if(m_playersMoney[i] < 50)
            {
                brokePlayers++;
            }
        }
        
        //if all players cannot afford to bid, end the auction
        if(brokePlayers == m_currentGame.getNumPlayers())
        {
            continueBtn.setVisible(true);
            bidFifty.setVisible(false);
            bidOneHund.setVisible(false);
            bidOneFifty.setVisible(false);
            passBtn.setVisible(false);
            propertyInfo.setText("Nobody can afford the property, the property will remain for sale");
        }
        
        //set the panels according to how many players are in the game
        switch(m_currentGame.getNumPlayers())
        {
            //2 players
            case 2:
                playerOneName.setText(m_currentGame.getPlayerName(1));
                playerOneMoney.setText("Money: " + Integer.toString(m_playersMoney[0]));
                playerTwoName.setText(m_currentGame.getPlayerName(2));
                playerTwoMoney.setText("Money: " + Integer.toString(m_playersMoney[1]));
                playerThreePanel.setVisible(false);
                playerFourPanel.setVisible(false);
                m_participatingPlayers.add(1);
                m_participatingPlayers.add(2);
                
                //dont let bankruptplayers play
                if(m_currentGame.getPlayer(1).isBankrupt())
                {
                    m_participatingPlayers.set(0, -1);
                    m_passedPlayers++;
                    playerOneName.setText(m_currentGame.getPlayerName(1) + " is out");
                    nextTurn();
                }
                if(m_currentGame.getPlayer(2).isBankrupt())
                {
                    m_participatingPlayers.set(1, -1);
                    m_passedPlayers++;
                    playerTwoName.setText(m_currentGame.getPlayerName(2) + " is out");
                }
                break;
            //3 players
            case 3:
                playerOneName.setText(m_currentGame.getPlayerName(1));
                playerOneMoney.setText("Money: " + Integer.toString(m_playersMoney[0]));
                playerTwoName.setText(m_currentGame.getPlayerName(2));
                playerTwoMoney.setText("Money: " + Integer.toString(m_playersMoney[1]));
                playerThreeName.setText(m_currentGame.getPlayerName(3));
                playerThreeMoney.setText("Money: " + Integer.toString(m_playersMoney[2]));
                playerFourPanel.setVisible(false);
                m_participatingPlayers.add(1);
                m_participatingPlayers.add(2);
                m_participatingPlayers.add(3);
                
                //dont let bankruptplayers play
                if(m_currentGame.getPlayer(1).isBankrupt())
                {
                    m_participatingPlayers.set(0, -1);
                    m_passedPlayers++;
                    playerOneName.setText(m_currentGame.getPlayerName(1) + " is out");
                    nextTurn();
                }
                if(m_currentGame.getPlayer(2).isBankrupt())
                {
                    m_participatingPlayers.set(1, -1);
                    m_passedPlayers++;
                    playerTwoName.setText(m_currentGame.getPlayerName(2) + " is out");
                }
                if(m_currentGame.getPlayer(3).isBankrupt())
                {
                    m_participatingPlayers.set(2, -1);
                    m_passedPlayers++;
                    playerThreeName.setText(m_currentGame.getPlayerName(3) + " is out");
                }
                break;
            //4 players
            case 4:
                playerOneName.setText(m_currentGame.getPlayerName(1));
                playerOneMoney.setText("Money: " + Integer.toString(m_playersMoney[0]));
                playerTwoName.setText(m_currentGame.getPlayerName(2));
                playerTwoMoney.setText("Money: " + Integer.toString(m_playersMoney[1]));
                playerThreeName.setText(m_currentGame.getPlayerName(3));
                playerThreeMoney.setText("Money: " + Integer.toString(m_playersMoney[2]));
                playerFourName.setText(m_currentGame.getPlayerName(4));
                playerFourMoney.setText("Money: " + Integer.toString(m_playersMoney[3]));
                m_participatingPlayers.add(1);
                m_participatingPlayers.add(2);
                m_participatingPlayers.add(3);
                m_participatingPlayers.add(4);
                
                //dont let bankruptplayers play
                if(m_currentGame.getPlayer(1).isBankrupt())
                {
                    m_participatingPlayers.set(0, -1);
                    m_passedPlayers++;
                    playerOneName.setText(m_currentGame.getPlayerName(1) + " is out");
                    nextTurn();
                }
                if(m_currentGame.getPlayer(2).isBankrupt())
                {
                    m_participatingPlayers.set(1, -1);
                    m_passedPlayers++;
                    playerTwoName.setText(m_currentGame.getPlayerName(2) + " is out");
                }
                if(m_currentGame.getPlayer(3).isBankrupt())
                {
                    m_participatingPlayers.set(2, -1);
                    m_passedPlayers++;
                    playerThreeName.setText(m_currentGame.getPlayerName(3) + " is out");
                }
                if(m_currentGame.getPlayer(4).isBankrupt())
                {
                    m_participatingPlayers.set(3, -1);
                    m_passedPlayers++;
                    playerFourName.setText(m_currentGame.getPlayerName(4) + " is out");
                }
                break;
                
            
        }
    }

/*
NAME
        bid

SYNOPSIS
        bid(int a_bid)
    
            a_bid --> Holds the amount being bid

DESCRIPTION
        This method will update the current bid on the property based on the ampount
        a player has bid.

RETURNS
        void

AUTHOR
        William Ryan
*/
    private void bid(int a_bid)
    {
        //if the player bidding cannot pay the amount they tried to bid, do not execute
        if(m_playersMoney[m_turn - 1] - (a_bid + m_currentBid) > 0)
        {
            //add to the current bis on the property
            m_playersMoney[m_turn - 1] = m_playersMoney[m_turn - 1] - (a_bid + m_currentBid);
            m_currentBid = m_currentBid + a_bid;
            
            //increment the turn
            if(nextTurn())
            {
                bidInd.setText("Price Paid: " + m_currentBid);
            }
            else
            {
                updateFrame();
            }
        }
    }
    
    //this method updates the frame after a change
    private void updateFrame()
    {
        switch(m_currentGame.getNumPlayers())
        {
            case 2:
                playerOneMoney.setText("Money: " + Integer.toString(m_playersMoney[0]));
                playerTwoMoney.setText("Money: " + Integer.toString(m_playersMoney[1]));
                break;
            case 3:
                playerOneMoney.setText("Money: " + Integer.toString(m_playersMoney[0]));
                playerTwoMoney.setText("Money: " + Integer.toString(m_playersMoney[1]));
                playerThreeMoney.setText("Money: " + Integer.toString(m_playersMoney[2]));
                break;
            case 4:
                playerOneMoney.setText("Money: " + Integer.toString(m_playersMoney[0]));
                playerTwoMoney.setText("Money: " + Integer.toString(m_playersMoney[1]));
                playerThreeMoney.setText("Money: " + Integer.toString(m_playersMoney[2]));
                playerFourMoney.setText("Money: " + Integer.toString(m_playersMoney[3]));
                break;
        }
        
        switch(m_turn)
        {
            case 1:
                playerOneInd.setVisible(true);
                playerTwoInd.setVisible(false);
                playerThreeInd.setVisible(false);
                playerFourInd.setVisible(false);
                break;
            case 2:
                playerOneInd.setVisible(false);
                playerTwoInd.setVisible(true);
                playerThreeInd.setVisible(false);
                playerFourInd.setVisible(false);
                break;
            case 3:
                playerOneInd.setVisible(false);
                playerTwoInd.setVisible(false);
                playerThreeInd.setVisible(true);
                playerFourInd.setVisible(false);
                break;
            case 4:
                playerOneInd.setVisible(false);
                playerTwoInd.setVisible(false);
                playerThreeInd.setVisible(false);
                playerFourInd.setVisible(true);
                break;
        }
        
        bidInd.setText("Current Bid: $" + m_currentBid);
    }
/*
NAME
        nextTurn

SYNOPSIS
        nextTurn()
    
            No parameters.

DESCRIPTION
        This method will increment the turn to the next player in line and decides
        whether the auction is over or not.

RETURNS
        void

AUTHOR
        William Ryan
*/
    private boolean nextTurn()
    {
        
        while(true)
        {
            m_turn++;
                
            if(m_turn > m_participatingPlayers.size())
            {
                m_turn = 1;
            }   
            //if the next player has not passed 
            if(m_participatingPlayers.get(m_turn - 1) != -1)
            {
                break;
            }
        }
        //if the number of passed players is equal to the number of players - 1
        if(m_passedPlayers == m_currentGame.getNumPlayers() - 1)
        {
            //state who won the auction
            propertyName.setText(m_currentGame.getPlayerName(m_turn) + " Has Won the Property!");
            
            //get the property and its id
            MinorProperty tempProp = (MinorProperty) m_currentGame.getSpace(m_currentSpaceNum);
            int [] propLocation =  tempProp.getPropertyNum(m_currentSpaceNum);
            
            //set the property owened by the player who won
            m_currentGame.getPlayer(m_turn).buyProperty(propLocation[0], propLocation[1], m_currentBid);
            m_currentGame.getBoard().getSpace(m_currentSpaceNum).setOwned();
            m_currentGame.getBoard().getSpace(m_currentSpaceNum).setOwner(m_turn);
            
            ArrayList<boolean[]> playerPropFamily = m_currentGame.getPlayer(m_turn).getOwnedProperties();
            ArrayList <Integer> properties = new ArrayList<Integer>();
            
            //if the player has a monopoly with the bought property
            for(int i = 0; i < playerPropFamily.get(propLocation[0]).length;i++)
            {
                if(playerPropFamily.get(propLocation[0])[i])
                {
                    properties.add(m_currentGame.getBoard().getPropertyNumById(propLocation[0], i));
                }
            }
            if(properties.size() == playerPropFamily.get(propLocation[0]).length)
            {
                for(int i = 0; i < properties.size();i++)
                {
                    m_currentGame.getBoard().getMajorProperty(properties.get(i)).setCurrentPrice(m_currentGame.getBoard().getMajorProperty(properties.get(i)).getMonopolyRent());
                }
                m_currentGame.getPlayer(m_turn).setMonopoly(propLocation[0], true);
            }
        
            bidFifty.setVisible(false);
            bidOneHund.setVisible(false);
            bidOneFifty.setVisible(false);
            passBtn.setVisible(false);
            continueBtn.setVisible(true);
            return true;
        }
        return false;
    }


    //variables created by form editor
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bidFifty;
    private javax.swing.JLabel bidInd;
    private javax.swing.JButton bidOneFifty;
    private javax.swing.JButton bidOneHund;
    private javax.swing.JButton continueBtn;
    private javax.swing.JButton passBtn;
    private javax.swing.JLabel playerFourInd;
    private javax.swing.JLabel playerFourMoney;
    private javax.swing.JLabel playerFourName;
    private javax.swing.JPanel playerFourPanel;
    private javax.swing.JLabel playerOneInd;
    private javax.swing.JLabel playerOneMoney;
    private javax.swing.JLabel playerOneName;
    private javax.swing.JPanel playerOnePanel;
    private javax.swing.JLabel playerThreeInd;
    private javax.swing.JLabel playerThreeMoney;
    private javax.swing.JLabel playerThreeName;
    private javax.swing.JPanel playerThreePanel;
    private javax.swing.JLabel playerTwoInd;
    private javax.swing.JLabel playerTwoMoney;
    private javax.swing.JLabel playerTwoName;
    private javax.swing.JPanel playerTwoPanel;
    private javax.swing.JLabel propertyInfo;
    private javax.swing.JLabel propertyName;
    // End of variables declaration//GEN-END:variables
    
    //The current game in play
    private Game m_currentGame;
    //The end turn button from MainGameFrame
    private javax.swing.JButton m_endTurn;
    //The players money indicator from MainGameFrame
    private javax.swing.JLabel[] m_moneyInd;
    //m_currentSpaceNum --> The number of the property being bidded on
    //m_turn --> The number of the player of whos turn it is
    //m_currentBid --> The current bid on the property
    //m_passedPlayers --> The number of player who have passed
    private int m_currentSpaceNum, m_turn, m_currentBid, m_passedPlayers;
    //m_playersMoney --> Holds all the players money for the duration of the auction
    private int[] m_playersMoney;
    //m_participatingPlayers --> Holds the numbers of the participating players
    private ArrayList <Integer>m_participatingPlayers;
}
